import { join, fromFileUrl, dirname } from "https://deno.land/std@0.189.0/path/mod.ts"

interface ReleasesResponse {
  versions: string[]
}

const response = await fetch("https://typescript.azureedge.net/indexes/releases.json")
const releases: ReleasesResponse = await response.json()
const versions = releases.versions.reverse()

// Look through the prereleases to see if the beta and RC are included in the pre-releases
// and add those to the list of versions.
const preReleaseResponse = await fetch("https://typescript.azureedge.net/indexes/pre-releases.json")
const preReleases: ReleasesResponse = await preReleaseResponse.json()
const latestStable = versions[0]

// e.g. 4.3.1 -> 4.4.0-beta
// this won't work for 5.0 specifically, but that's an ok edge case for me
const possibleBeta = `${latestStable.split(".")[0]}.${Number(latestStable.split(".")[1]) + 1}.0-beta`
const addBeta = preReleases.versions.includes(possibleBeta)

const possibleRc = `${latestStable.split(".")[0]}.${Number(latestStable.split(".")[1]) + 1}.1-rc`
const addRc = preReleases.versions.includes(possibleRc)

// Get the highest maj/min ignoring patch versions
const latestMajMin = new Map()
versions.forEach(v => {
  const majMin = v.split(".")[0] + "." + v.split(".")[1]
  if (!latestMajMin.has(majMin)) {
    latestMajMin.set(majMin, v)
  }
})

// prettier-ignore
// Adds RC and Beta to the versions automatically
const supportedVersions = [
  addRc ? possibleRc : "", 
  addBeta ? possibleBeta : "", 
  ...latestMajMin.values()
].filter(Boolean)

const code = `// This is auto-generated by scripts/releases.js
/** Every prod version **/
export const allReleases = ["${versions.join('", "')}"] as const

/** The latest major.min version **/
export const supportedReleases = ["${supportedVersions.join('", "')}"] as const

/** A type of all versions **/
export type ReleaseVersions = "${[possibleBeta, possibleRc, ...versions].join('" | "')}"
`.split("\n").map(x => x.trim()).filter(x => x)

const path = join(dirname(fromFileUrl(import.meta.url)), ".", "release_data.ts")
Deno.writeFile(path, new TextEncoder().encode(code.join("\n")))
console.log({
    code,
    releases,
    supportedVersions,
    possibleBeta,
    possibleRc,
    versions
})